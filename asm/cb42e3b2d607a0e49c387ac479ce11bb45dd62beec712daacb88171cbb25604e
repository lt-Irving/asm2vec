 .name sym.skip_to_delim
 .offset 0000000000062f50
 .file bash
 endbr64
 push r15
 push r14
 mov r14d, ecx
 push r13
 mov r13d, esi
 push r12
 push rbp
 push rbx
 mov rbx, rdi
 sub rsp, CONST
 mov qword [rsp + CONST], rdx
 movsxd rdx, esi
 mov dword [rsp + CONST], ecx
 lea r9, [rdi + rdx]
 mov rdi, r9
 mov rax, qword fs:[CONST]
 mov qword [rsp + CONST], rax
 xor eax, eax
 mov qword [rsp + CONST], rdx
 mov qword [rsp + CONST], r9
 mov qword [rsp + CONST], CONST
 call CONST
 mov rdx, qword [rsp + CONST]
 mov r9, qword [rsp + CONST]
 add rax, rdx
 and r14d, CONST
 mov qword [rsp + CONST], rax
 mov eax, dword [rip + CONST]
 mov dword [rsp + CONST], eax
 cjmp LABEL30
 mov dword [rip + CONST], CONST
LABEL30:
 mov edi, dword [rsp + CONST]
 movsx r15d, byte [r9]
 mov eax, edi
 mov ecx, r15d
 and eax, CONST
 mov dword [rsp + CONST], eax
 mov eax, edi
 and eax, CONST
 mov dword [rsp + CONST], eax
 lea eax, [rdi*CONST]
 and eax, CONST
 mov dword [rsp + CONST], eax
 mov eax, edi
 and eax, CONST
 mov dword [rsp + CONST], eax
 test r15d, r15d
 cjmp LABEL48
 mov ebp, edi
 shr edi, CONST
 mov dword [rsp + CONST], CONST
 xor r12d, r12d
 mov eax, edi
 and ebp, CONST
 lea r14, [rip + CONST]
 xor r10d, r10d
 and eax, CONST
 mov byte [rsp + CONST], al
 mov eax, r13d
 mov r13d, r15d
 mov r15d, eax
 jmp LABEL62
LABEL105:
 cmp r13d, CONST
 cjmp LABEL64
 test r12d, r12d
 cjmp LABEL66
 cmp r13d, CONST
 cjmp LABEL68
 mov eax, dword [rsp + CONST]
 test eax, eax
 mov eax, dword [rsp + CONST]
 setne r10b
 test eax, eax
 setne sil
 cmp r13d, CONST
 sete al
 test sil, al
 cjmp LABEL78
 test r10b, r10b
 cjmp LABEL80
LABEL78:
 cmp r13d, CONST
 cjmp LABEL82
 test r10b, r10b
 cjmp LABEL82
 add dword [rsp + CONST], CONST
 add r15d, CONST
 xor r10d, r10d
 movsxd rdx, r15d
 nop dword [rax + rax]
LABEL195:
 lea r9, [rbx + rdx]
 movsx r13d, byte [r9]
 mov ecx, r13d
 test r13d, r13d
 cjmp LABEL94
LABEL62:
 xor r11d, r11d
 test ebp, ebp
 cjmp LABEL97
 cmp r13d, CONST
 sete r11b
 cmp r13d, CONST
 sete al
 or r11d, eax
 movzx r11d, r11b
LABEL97:
 test r10d, r10d
 cjmp LABEL105
 cmp dword [rip + CONST], CONST
 cjmp LABEL107
 mov eax, ecx
 shr al, CONST
 and eax, CONST
 mov eax, dword [r14 + rax*CONST]
 shr eax, cl
 test al, CONST
 cjmp LABEL114
 mov eax, dword [rip + CONST]
 test eax, eax
 cjmp LABEL117
 mov eax, CONST
 test cl, cl
 cjmp LABEL117
LABEL172:
 add r15d, eax
LABEL174:
 movsxd rdx, r15d
 xor r10d, r10d
 lea r9, [rbx + rdx]
 movsx r13d, byte [r9]
 mov ecx, r13d
 test r13d, r13d
 cjmp LABEL62
LABEL94:
 mov eax, r15d
 jmp LABEL130
LABEL210:
 cmp r13d, CONST
 cjmp LABEL132
 mov edi, dword [rsp + CONST]
 movzx eax, byte [rbx + rdx + CONST]
 test edi, edi
 cjmp LABEL136
 cmp al, CONST
 cjmp LABEL138
LABEL136:
 cmp al, CONST
 cjmp LABEL140
LABEL359:
 test byte [rsp + CONST], CONST
 cjmp LABEL142
 mov esi, dword [rip + CONST]
 test esi, esi
 cjmp LABEL145
LABEL392:
 cmp byte [rbx + rdx + CONST], CONST
 cjmp LABEL147
LABEL145:
 cmp byte [rsp + CONST], CONST
 cjmp LABEL142
 cmp r13d, CONST
 cjmp LABEL151
LABEL142:
 test r11d, r11d
 cjmp LABEL153
LABEL470:
 cmp dword [rip + CONST], CONST
 cjmp LABEL107
 movzx ecx, byte [r9]
 mov eax, ecx
 shr al, CONST
 and eax, CONST
 mov eax, dword [r14 + rax*CONST]
 shr eax, cl
 test al, CONST
 cjmp LABEL114
 mov eax, dword [rip + CONST]
 test eax, eax
 cjmp LABEL117
 test cl, cl
 cjmp LABEL117
 setne al
 movzx eax, al
LABEL327:
 test rax, rax
 cjmp LABEL172
LABEL107:
 add r15d, CONST
 jmp LABEL174
LABEL66:
 xor r12d, r12d
 cmp r13d, CONST
 setne r12b
 cmp dword [rip + CONST], CONST
 cjmp LABEL179
 mov eax, ecx
 shr al, CONST
 and eax, CONST
 mov eax, dword [r14 + rax*CONST]
 shr eax, cl
 test al, CONST
 cjmp LABEL186
 mov eax, dword [rip + CONST]
 test eax, eax
 cjmp LABEL189
 mov eax, CONST
 test cl, cl
 cjmp LABEL189
LABEL306:
 add r15d, eax
 movsxd rdx, r15d
 jmp LABEL195
LABEL82:
 or r11d, dword [rsp + CONST]
 cjmp LABEL197
LABEL345:
 mov eax, dword [rsp + CONST]
 test eax, eax
 cjmp LABEL200
 test r15d, r15d
 cjmp LABEL200
 cmp byte [rbx + rdx + CONST], CONST
 cjmp LABEL200
 cmp r13d, CONST
 cjmp LABEL206
LABEL247:
 cmp r13d, CONST
 cjmp LABEL208
 cmp r13d, CONST
 cjmp LABEL210
 test r10b, r10b
 cjmp LABEL210
 lea eax, [r15 + CONST]
 movsxd rdx, eax
 mov dword [rsp + CONST], eax
 cmp byte [rbx + rdx], CONST
 cjmp LABEL217
 lea rsi, [rsp + CONST]
 mov r9d, CONST
 lea r8, [rip + CONST]
 lea rcx, [rip + CONST]
LABEL445:
 mov rdx, rcx
 mov rdi, rbx
 call CONST
 movsxd rdx, dword [rsp + CONST]
 mov rax, rdx
LABEL459:
 cmp byte [rbx + rdx], CONST
 cjmp LABEL228
LABEL130:
 mov edi, dword [rsp + CONST]
 mov dword [rip + CONST], edi
LABEL600:
 mov rbx, qword [rsp + CONST]
 xor rbx, qword fs:[CONST]
 cjmp LABEL233
 add rsp, CONST
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 pop r15
 ret
LABEL64:
 add r15d, CONST
 mov r10d, CONST
 movsxd rdx, r15d
 jmp LABEL195
LABEL200:
 cmp r13d, CONST
 cjmp LABEL247
 add r15d, CONST
 lea r13, [rsp + CONST]
 mov qword [rsp + CONST], CONST
 movsxd rdx, r15d
 lea rsi, [rbx + rdx]
 movzx ecx, byte [rsi]
 cmp cl, CONST
 cjmp LABEL255
 test cl, cl
 cjmp LABEL257
 mov dword [rsp + CONST], ebp
 mov rbp, r13
 jmp LABEL260
LABEL283:
 mov eax, ecx
 shr al, CONST
 and eax, CONST
 mov eax, dword [r14 + rax*CONST]
 shr eax, cl
 test al, CONST
 cjmp LABEL267
 mov r8d, dword [rip + CONST]
 test r8d, r8d
 cjmp LABEL270
 mov eax, CONST
 test cl, cl
 cjmp LABEL270
LABEL394:
 add r15d, eax
LABEL406:
 movsxd rdx, r15d
 lea rsi, [rbx + rdx]
 movzx ecx, byte [rsi]
 test cl, cl
 cjmp LABEL279
LABEL289:
 cmp cl, CONST
 cjmp LABEL281
LABEL260:
 cmp dword [rip + CONST], CONST
 cjmp LABEL283
 add r15d, CONST
LABEL475:
 movsxd rdx, r15d
 lea rsi, [rbx + rdx]
 movzx ecx, byte [rsi]
 test cl, cl
 cjmp LABEL289
LABEL279:
 mov ebp, dword [rsp + CONST]
LABEL257:
 xor r10d, r10d
 jmp LABEL195
LABEL189:
 mov rax, qword [rsp + CONST]
 xor edi, edi
 lea rcx, [rsp + CONST]
 mov rsi, r9
 mov dword [rsp + CONST], r10d
 mov r13, qword [rsp + CONST]
 sub rax, rdx
 mov rdx, rax
 call CONST
 mov r10d, dword [rsp + CONST]
 cmp rax, CONST
 cjmp LABEL304
 test rax, rax
 cjmp LABEL306
 nop dword [rax]
LABEL179:
 add r15d, CONST
 movsxd rdx, r15d
 jmp LABEL195
LABEL114:
 mov eax, CONST
 jmp LABEL172
LABEL68:
 add r15d, CONST
 mov r10d, r12d
 mov r12d, CONST
 movsxd rdx, r15d
 jmp LABEL195
LABEL117:
 mov rax, qword [rsp + CONST]
 xor edi, edi
 lea rcx, [rsp + CONST]
 mov rsi, r9
 mov r13, qword [rsp + CONST]
 sub rax, rdx
 mov rdx, rax
 call CONST
 cmp rax, CONST
 cjmp LABEL327
 mov qword [rsp + CONST], r13
 add r15d, CONST
 jmp LABEL174
LABEL197:
 mov rdi, qword [rsp + CONST]
 mov esi, r13d
 mov byte [rsp + CONST], cl
 mov qword [rsp + CONST], rdx
 mov qword [rsp + CONST], r9
 mov byte [rsp + CONST], r10b
 mov dword [rsp + CONST], r11d
 call CONST
 mov r11d, dword [rsp + CONST]
 movzx r10d, byte [rsp + CONST]
 test rax, rax
 mov r9, qword [rsp + CONST]
 mov rdx, qword [rsp + CONST]
 movzx ecx, byte [rsp + CONST]
 cjmp LABEL345
 jmp LABEL94
LABEL186:
 mov eax, CONST
 add r15d, eax
 movsxd rdx, r15d
 jmp LABEL195
LABEL132:
 mov r10d, dword [rsp + CONST]
 and r10d, CONST
 cjmp LABEL353
 mov eax, r13d
 and eax, CONST
 cmp eax, CONST
 cjmp LABEL353
 cmp byte [rbx + rdx + CONST], CONST
 cjmp LABEL359
 lea eax, [r15 + CONST]
 movsxd rdx, eax
 mov dword [rsp + CONST], eax
 cmp byte [rbx + rdx], CONST
 cjmp LABEL217
 cmp r13d, CONST
 lea rax, [rip + CONST]
 lea rsi, [rsp + CONST]
 mov r9d, CONST
 lea rdx, [rip + CONST]
 lea r8, [rip + CONST]
 mov rdi, rbx
 mov dword [rsp + CONST], r10d
 cmove rdx, rax
 lea rcx, [rip + CONST]
 call CONST
 movsxd rdx, dword [rsp + CONST]
 cmp rdx, qword [rsp + CONST]
 mov r10d, dword [rsp + CONST]
 mov rax, rdx
 cjmp LABEL380
 cmp byte [rbx + rdx], CONST
 cjmp LABEL130
 lea r15d, [rdx + CONST]
 xor r12d, r12d
 movsxd rdx, r15d
 jmp LABEL195
LABEL353:
 test byte [rsp + CONST], CONST
 cjmp LABEL145
 mov esi, dword [rip + CONST]
 test esi, esi
 cjmp LABEL145
 jmp LABEL392
LABEL267:
 mov eax, CONST
 jmp LABEL394
LABEL270:
 mov rax, qword [rsp + CONST]
 xor edi, edi
 mov rcx, rbp
 mov r13, qword [rsp + CONST]
 sub rax, rdx
 mov rdx, rax
 call CONST
 cmp rax, CONST
 cjmp LABEL403
 mov qword [rsp + CONST], r13
 add r15d, CONST
 jmp LABEL406
LABEL80:
 add r15d, CONST
 sub dword [rsp + CONST], CONST
 mov r10d, r12d
 movsxd rdx, r15d
 jmp LABEL195
LABEL208:
 mov ecx, dword [rsp + CONST]
 mov rsi, qword [rsp + CONST]
 lea edx, [r15 + CONST]
 mov rdi, rbx
 call CONST
 xor r10d, r10d
 movsxd rdx, eax
 mov r15, rdx
 jmp LABEL195
LABEL304:
 add r15d, CONST
 mov qword [rsp + CONST], r13
 movsxd rdx, r15d
 jmp LABEL195
LABEL228:
 lea r15d, [rax + CONST]
 xor r10d, r10d
 movsxd rdx, r15d
 jmp LABEL195
LABEL281:
 mov ebp, dword [rsp + CONST]
LABEL255:
 test cl, cl
 cjmp LABEL257
LABEL594:
 add r15d, CONST
 xor r10d, r10d
 movsxd rdx, r15d
 jmp LABEL195
LABEL151:
 lea eax, [r15 + CONST]
 movsxd rdx, eax
 mov dword [rsp + CONST], eax
 cmp byte [rbx + rdx], CONST
 cjmp LABEL130
 lea rsi, [rsp + CONST]
 mov r9d, CONST
 lea r8, [rip + CONST]
 lea rcx, [rip + CONST]
 jmp LABEL445
LABEL140:
 lea eax, [r15 + CONST]
 movsxd rdx, eax
 mov dword [rsp + CONST], eax
 cmp byte [rbx + rdx], CONST
 cjmp LABEL217
 lea rsi, [rsp + CONST]
 mov ecx, CONST
 xor edx, edx
 mov rdi, rbx
 call CONST
LABEL562:
 movsxd rdx, dword [rsp + CONST]
 mov rax, rdx
 cmp rdx, qword [rsp + CONST]
 cjmp LABEL459
LABEL380:
 mov eax, dword [rsp + CONST]
 jmp LABEL130
LABEL153:
 mov rdi, qword [rsp + CONST]
 mov esi, r13d
 mov qword [rsp + CONST], rdx
 mov qword [rsp + CONST], r9
 call CONST
 mov r9, qword [rsp + CONST]
 mov rdx, qword [rsp + CONST]
 test rax, rax
 cjmp LABEL470
 jmp LABEL94
LABEL403:
 test rax, rax
 cjmp LABEL394
 add r15d, CONST
 jmp LABEL475
LABEL206:
 add r15d, CONST
 lea r13, [rsp + CONST]
 mov qword [rsp + CONST], CONST
 movsxd rdx, r15d
 lea rsi, [rbx + rdx]
 movzx eax, byte [rsi]
 cmp al, CONST
 cjmp LABEL483
 test al, al
 cjmp LABEL257
 mov dword [rsp + CONST], ebp
 mov rbp, r13
 jmp LABEL488
LABEL520:
 mov r9d, dword [rip + CONST]
 test r9d, r9d
 cjmp LABEL491
 test cl, cl
 cjmp LABEL491
 setne al
 movzx eax, al
LABEL532:
 test rax, rax
 cjmp LABEL497
LABEL510:
 add r15d, CONST
LABEL523:
 movsxd rdx, r15d
 lea rsi, [rbx + rdx]
 movzx eax, byte [rsi]
 test al, al
 cjmp LABEL279
 cmp al, CONST
 cjmp LABEL505
LABEL488:
 mov ecx, dword [rip + CONST]
 cmp al, CONST
 cjmp LABEL508
LABEL537:
 cmp ecx, CONST
 cjmp LABEL510
 movsxd rdx, r15d
 lea rsi, [rbx + rdx]
 movzx ecx, byte [rsi]
 mov eax, ecx
 shr al, CONST
 and eax, CONST
 mov eax, dword [r14 + rax*CONST]
 shr eax, cl
 test al, CONST
 cjmp LABEL520
 mov eax, CONST
LABEL497:
 add r15d, eax
 jmp LABEL523
LABEL491:
 mov rax, qword [rsp + CONST]
 xor edi, edi
 mov rcx, rbp
 mov r13, qword [rsp + CONST]
 sub rax, rdx
 mov rdx, rax
 call CONST
 cmp rax, CONST
 cjmp LABEL532
 mov qword [rsp + CONST], r13
 add r15d, CONST
 jmp LABEL523
LABEL508:
 cmp byte [rbx + rdx + CONST], CONST
 cjmp LABEL537
 cmp byte [rbx + rdx + CONST], CONST
 cjmp LABEL537
 cmp ecx, CONST
 cjmp LABEL541
 mov edi, dword [rip + CONST]
 mov eax, CONST
 shr edi, CONST
 and edi, CONST
 or edi, dword [rip + CONST]
 cjmp LABEL547
LABEL614:
 add r15d, eax
 jmp LABEL537
LABEL138:
 lea eax, [r15 + CONST]
 movsxd rdx, eax
 mov dword [rsp + CONST], eax
 cmp byte [rbx + rdx], CONST
 cjmp LABEL217
 lea rsi, [rsp + CONST]
 mov r9d, CONST
 lea r8, [rip + CONST]
 mov rdi, rbx
 lea rcx, [rip + CONST]
 lea rdx, [rip + CONST]
 call CONST
 jmp LABEL562
LABEL147:
 mov esi, r13d
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rdx
 mov qword [rsp + CONST], r9
 mov dword [rsp + CONST], r11d
 mov byte [rsp + CONST], cl
 call CONST
 mov r11d, dword [rsp + CONST]
 mov r9, qword [rsp + CONST]
 test rax, rax
 mov rdx, qword [rsp + CONST]
 cjmp LABEL145
 lea eax, [r15 + CONST]
 movzx ecx, byte [rsp + CONST]
 movsxd rdx, eax
 mov dword [rsp + CONST], eax
 cmp byte [rbx + rdx], CONST
 cjmp LABEL217
 mov edx, CONST
 mov byte [rsp + CONST], cl
 mov rdi, rbx
 lea rsi, [rsp + CONST]
 mov word [rsp + CONST], dx
 mov r9d, CONST
 lea rdx, [rsp + CONST]
 lea r8, [rip + CONST]
 lea rcx, [rip + CONST]
 call CONST
 jmp LABEL562
LABEL505:
 mov ebp, dword [rsp + CONST]
LABEL483:
 test al, al
 cjmp LABEL594
 jmp LABEL257
LABEL48:
 mov eax, r13d
 jmp LABEL130
LABEL217:
 mov esi, dword [rsp + CONST]
 mov dword [rip + CONST], esi
 jmp LABEL600
LABEL541:
 add r15d, CONST
 jmp LABEL510
LABEL547:
 mov rax, qword [rsp + CONST]
 xor edi, edi
 mov rcx, rbp
 mov r13, qword [rsp + CONST]
 sub rax, rdx
 mov rdx, rax
 call CONST
 cmp rax, CONST
 cjmp LABEL611
 mov ecx, dword [rip + CONST]
 test rax, rax
 cjmp LABEL614
 add r15d, CONST
 jmp LABEL537
LABEL611:
 mov qword [rsp + CONST], r13
 mov ecx, dword [rip + CONST]
 add r15d, CONST
 jmp LABEL537
LABEL233:
 call CONST
