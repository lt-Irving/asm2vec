 .name sym.type_builtin
 .offset 00000000000a2260
 .file bash
 endbr64
 test rdi, rdi
 cjmp LABEL2
 push r14
 mov rax, rdi
 lea r11, [rip + CONST]
 lea r10, [rip + CONST]
 push r13
 lea r9, [rip + CONST]
 lea r13, [rip + CONST]
 push r12
 lea r12, [rip + CONST]
 push rbp
 mov rbp, rdi
 push rbx
 lea rbx, [rip + CONST]
 sub rsp, CONST
 jmp LABEL17
LABEL47:
 cmp cl, CONST
 cjmp LABEL19
 cmp cl, CONST
 cjmp LABEL21
 cmp cl, CONST
 cjmp LABEL23
 mov ecx, CONST
 mov rsi, r8
 mov rdi, r12
LABEL99:
 repe cmpsb byte [rsi], byte [rdi]
 seta cl
 sbb cl, CONST
 test cl, cl
 cjmp LABEL23
 mov byte [rdx + CONST], CONST
 mov rdx, qword [rax + CONST]
 mov rdx, qword [rdx]
 mov byte [rdx + CONST], CONST
 nop dword [rax]
LABEL23:
 mov rax, qword [rax]
 test rax, rax
 cjmp LABEL39
LABEL17:
 mov rdx, qword [rax + CONST]
 mov rdx, qword [rdx]
 cmp byte [rdx], CONST
 cjmp LABEL39
 movzx ecx, byte [rdx + CONST]
 lea r8, [rdx + CONST]
 cmp cl, CONST
 cjmp LABEL47
 mov ecx, CONST
 mov rsi, r8
 mov rdi, r9
 repe cmpsb byte [rsi], byte [rdi]
 seta cl
 sbb cl, CONST
 test cl, cl
 cjmp LABEL23
LABEL87:
 mov byte [rdx + CONST], CONST
 mov rdx, qword [rax + CONST]
 mov rdx, qword [rdx]
 mov byte [rdx + CONST], CONST
 mov rax, qword [rax]
 test rax, rax
 cjmp LABEL17
 nop
LABEL39:
 call CONST
 mov ebx, CONST
 lea r12, [rip + CONST]
LABEL115:
 lea rsi, [rip + CONST]
 mov rdi, rbp
 call CONST
 cmp eax, CONST
 cjmp LABEL71
 cmp eax, CONST
 cjmp LABEL73
 sub eax, CONST
 cmp eax, CONST
 cjmp LABEL76
 movsxd rax, dword [r12 + rax*CONST]
 add rax, r12
 notrack jmp rax
LABEL19:
 mov ecx, CONST
 mov rsi, r8
 mov rdi, r10
 repe cmpsb byte [rsi], byte [rdi]
 seta cl
 sbb cl, CONST
 test cl, cl
 cjmp LABEL87
 mov ecx, CONST
 mov rsi, r8
 mov rdi, rbx
 repe cmpsb byte [rsi], byte [rdi]
 seta cl
 sbb cl, CONST
 test cl, cl
 cjmp LABEL95
 mov ecx, CONST
 mov rsi, r8
 mov rdi, r13
 jmp LABEL99
LABEL21:
 mov ecx, CONST
 mov rsi, r8
 mov rdi, r11
 repe cmpsb byte [rsi], byte [rdi]
 seta cl
 sbb cl, CONST
 test cl, cl
 cjmp LABEL23
LABEL95:
 mov byte [rdx + CONST], CONST
 mov rdx, qword [rax + CONST]
 mov rdx, qword [rdx]
 mov byte [rdx + CONST], CONST
 jmp LABEL23
 and ebx, CONST
 or ebx, CONST
 jmp LABEL115
 and ebx, CONST
 or ebx, CONST
 jmp LABEL115
 or ebx, CONST
 jmp LABEL115
 or ebx, CONST
 jmp LABEL115
 and ebx, CONST
 or ebx, CONST
 jmp LABEL115
LABEL76:
 call CONST
 add rsp, CONST
 mov eax, CONST
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 ret
LABEL73:
 call CONST
 add rsp, CONST
 mov eax, CONST
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 ret
LABEL2:
 xor eax, eax
 ret
LABEL71:
 mov r12, qword [rip + CONST]
 test r12, r12
 cjmp LABEL148
 mov r14d, ebx
 xor r13d, r13d
 and r14d, CONST
 jmp LABEL152
LABEL166:
 test eax, eax
 mov r12, qword [r12]
 sete al
 movzx eax, al
 add r13d, eax
 test r12, r12
 cjmp LABEL159
LABEL152:
 mov rax, qword [r12 + CONST]
 mov esi, ebx
 mov rdi, qword [rax]
 call CONST
 mov esi, eax
 or esi, r14d
 cjmp LABEL166
 mov rdx, qword [r12 + CONST]
 mov dword [rsp + CONST], eax
 mov rdi, qword [rdx]
 call CONST
 mov eax, dword [rsp + CONST]
 jmp LABEL166
LABEL159:
 xor edi, edi
 test r13d, r13d
 setne dil
LABEL184:
 add rsp, CONST
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 jmp CONST
LABEL148:
 xor edi, edi
 jmp LABEL184
