 .name fcn.00007c20
 .offset 0000000000007c20
 .file dmesg
 endbr64
 test rdi, rdi
 cjmp LABEL2
 push r15
 mov r15, rsi
 push r14
 push r13
 push r12
 mov r12, rdi
 push rbp
 push rbx
 sub rsp, CONST
 movzx ebp, byte [rdi]
 test bpl, bpl
 cjmp LABEL14
 sub rdx, CONST
 mov r14, rdx
 cjmp LABEL14
 lea rbx, [rsi + CONST]
 xor r13d, r13d
 jmp LABEL20
LABEL32:
 mov byte [rbx + CONST], bpl
 add r12, CONST
 mov rdx, rbx
 add r13, CONST
LABEL80:
 movzx ebp, byte [r12]
 test bpl, bpl
 cjmp LABEL27
 add rbx, CONST
 cmp r13, r14
 cjmp LABEL30
LABEL20:
 cmp bpl, CONST
 cjmp LABEL32
 lea rax, [r13 + CONST]
 cmp rax, r14
 cjmp LABEL32
 cmp byte [r12 + CONST], CONST
 cjmp LABEL32
 call CONST
 movsx r8, byte [r12 + CONST]
 mov rdx, qword [rax]
 mov rax, r8
 movzx ecx, word [rdx + r8*CONST]
 test ch, CONST
 cjmp LABEL32
 movsx rdi, byte [r12 + CONST]
 movzx edx, word [rdx + rdi*CONST]
 mov rsi, rdi
 test dh, CONST
 cjmp LABEL32
 and ch, CONST
 cjmp LABEL51
 mov dword [rsp + CONST], edx
 mov qword [rsp + CONST], rdi
 mov byte [rsp + CONST], dil
 mov qword [rsp + CONST], r8
 call CONST
 mov r8, qword [rsp + CONST]
 mov edx, dword [rsp + CONST]
 mov rax, qword [rax]
 mov rdi, qword [rsp + CONST]
 movzx esi, byte [rsp + CONST]
 mov eax, dword [rax + r8*CONST]
 sub eax, CONST
 mov ebp, eax
 shl ebp, CONST
LABEL103:
 and dh, CONST
 lea eax, [rsi + CONST]
 cjmp LABEL68
 mov qword [rsp + CONST], rdi
 call CONST
 mov rdi, qword [rsp + CONST]
 mov rax, qword [rax]
 mov eax, dword [rax + rdi*CONST]
 sub eax, CONST
LABEL68:
 or eax, ebp
 mov rdx, rbx
 add r12, CONST
 add r13, CONST
 mov byte [rbx + CONST], al
 jmp LABEL80
LABEL27:
 sub rbx, r15
 lea rax, [rbx + CONST]
LABEL95:
 mov byte [rdx], CONST
 add rsp, CONST
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 pop r15
 ret
LABEL30:
 mov rax, rdx
 sub rax, r15
 add rax, CONST
 jmp LABEL95
LABEL2:
 xor eax, eax
 ret
LABEL14:
 mov rdx, r15
 mov eax, CONST
 jmp LABEL95
LABEL51:
 shl eax, CONST
 mov ebp, eax
 jmp LABEL103
