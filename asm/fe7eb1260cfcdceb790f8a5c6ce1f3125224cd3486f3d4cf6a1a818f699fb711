 .name fcn.0000ed70
 .offset 000000000000ed70
 .file diff
 push r15
 push r14
 mov r14d, edx
 push r13
 push r12
 push rbp
 push rbx
 sub rsp, CONST
 mov r13, qword [rsi]
 mov rbp, qword [rsi + CONST]
 mov r15, qword [rip + CONST]
 test rdi, rdi
 cjmp LABEL12
 movzx eax, byte [rdi]
 mov rbx, rdi
 xor r12d, r12d
 test al, al
 cjmp LABEL17
 cmp byte [rip + CONST], CONST
 lea rdx, [rip + CONST]
 lea r12, [rip + CONST]
 mov rcx, rdi
 cmove r12, rdx
 cmp byte [rip + CONST], CONST
 mov rdx, r12
 cjmp LABEL25
 cmp byte [r13], CONST
 cjmp LABEL25
 xor ecx, ecx
 cmp al, CONST
 lea rdx, [rip + CONST]
 sete cl
 add rcx, rdi
 nop dword [rax]
LABEL25:
 mov esi, CONST
 mov rdi, r15
 xor eax, eax
 call CONST
LABEL17:
 test r14b, r14b
 cjmp LABEL39
 mov rcx, rbx
 mov rdx, r12
 mov rsi, rbp
 mov rdi, r13
 call CONST
 cmp byte [rbx], CONST
 cjmp LABEL46
LABEL78:
 cmp byte [rbp + CONST], CONST
 cjmp LABEL46
 mov edi, CONST
 call CONST
 mov edx, CONST
 lea rsi, [rip + CONST]
 xor edi, edi
 call CONST
 add rsp, CONST
 mov rdi, r15
 lea rdx, [rip + CONST]
 pop rbx
 mov rcx, rax
 pop rbp
 mov esi, CONST
 pop r12
 xor eax, eax
 pop r13
 pop r14
 pop r15
 jmp CONST
LABEL39:
 xor eax, eax
 cmp byte [rbp + CONST], CONST
 mov rsi, rbp
 mov rcx, rbx
 sete al
 mov rdx, r12
 mov rdi, r13
 sub rsi, rax
 call CONST
 cmp byte [rbx], CONST
 cjmp LABEL78
LABEL46:
 add rsp, CONST
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 pop r15
 ret
LABEL12:
 test dl, dl
 cjmp LABEL88
 xor eax, eax
 cmp byte [rbp + CONST], CONST
 mov rsi, rbp
 mov rdi, r13
 sete al
 xor ecx, ecx
 xor edx, edx
 sub rsi, rax
 call CONST
 jmp LABEL78
LABEL88:
 xor ecx, ecx
 xor edx, edx
 mov rsi, rbp
 mov rdi, r13
 call CONST
 jmp LABEL78
