 .name fcn.00002a70
 .offset 0000000000002a70
 .file base64
 push r15
 push r14
 push r13
 push r12
 push rbp
 push rbx
 sub rsp, CONST
 or qword [rsp], CONST
 sub rsp, CONST
 mov qword [rsp + CONST], rsi
 mov r12, rdi
 lea rbp, [rsp + CONST]
 mov byte [rsp + CONST], dl
 mov rax, qword fs:[CONST]
 mov qword [rsp + CONST], rax
 xor eax, eax
 lea rax, [rsp + CONST]
 mov rdi, rax
 mov qword [rsp + CONST], rax
 call CONST
 nop word cs:[rax + rax]
LABEL78:
 xor ebx, ebx
 jmp LABEL22
LABEL44:
 mov ecx, dword [rsp + CONST]
 add rbx, r15
 test ecx, ecx
 cjmp LABEL26
 cmp rbx, CONST
 cjmp LABEL28
LABEL112:
 test r13b, CONST
 cjmp LABEL28
LABEL22:
 mov edx, CONST
 lea rdi, [rbp + rbx]
 mov rcx, r12
 mov esi, CONST
 sub rdx, rbx
 call CONST
 mov r13d, dword [r12]
 mov qword [rsp + CONST], rax
 mov r15, rax
 mov eax, r13d
 and eax, CONST
 cmp byte [rsp + CONST], CONST
 mov dword [rsp + CONST], eax
 cjmp LABEL44
 test r15, r15
 cjmp LABEL46
 xor r14d, r14d
 jmp LABEL48
LABEL62:
 mov r15, qword [rsp + CONST]
 add r14, CONST
LABEL74:
 test r15, r15
 cjmp LABEL44
 cmp r14, r15
 cjmp LABEL44
LABEL48:
 lea rsi, [rbx + r14]
 movsx edi, byte [rsp + rsi + CONST]
 mov qword [rsp], rsi
 mov byte [rsp + CONST], dil
 call CONST
 movzx edx, byte [rsp + CONST]
 cmp dl, CONST
 cjmp LABEL62
 test al, al
 mov rsi, qword [rsp]
 cjmp LABEL62
 sub r15, CONST
 lea r10, [rbp + rsi + CONST]
 lea rdi, [rbp + rsi]
 mov rdx, r15
 mov rsi, r10
 mov qword [rsp + CONST], r15
 sub rdx, r14
 call CONST
 jmp LABEL74
LABEL28:
 xor r14d, r14d
 jmp LABEL76
LABEL100:
 test r14d, r14d
 cjmp LABEL78
LABEL103:
 mov qword [rsp + CONST], CONST
 mov rdx, rbx
LABEL109:
 mov rdi, qword [rsp + CONST]
 lea r15, [rsp + CONST]
 mov rsi, rbp
 lea r8, [rsp + CONST]
 mov rcx, r15
 call CONST
 mov rcx, qword [rsp + CONST]
 mov rdx, qword [rsp + CONST]
 mov rdi, r15
 mov esi, CONST
 mov r13d, eax
 call CONST
 cmp qword [rsp + CONST], rax
 cjmp LABEL94
 test r13b, r13b
 cjmp LABEL96
 mov r13d, dword [r12]
 add r14d, CONST
LABEL76:
 and r13d, CONST
 cjmp LABEL100
 cmp r14d, CONST
 cjmp LABEL102
 cjmp LABEL103
 mov edx, dword [rsp + CONST]
 test edx, edx
 cjmp LABEL102
 mov qword [rsp + CONST], CONST
 xor edx, edx
 jmp LABEL109
LABEL46:
 mov eax, dword [rsp + CONST]
 test eax, eax
 cjmp LABEL112
LABEL26:
 mov edx, CONST
 lea rsi, [rip + CONST]
 xor edi, edi
 call CONST
 mov r12, rax
 call CONST
 mov rdx, r12
 mov edi, CONST
 mov esi, dword [rax]
 xor eax, eax
 call CONST
LABEL102:
 mov rax, qword [rsp + CONST]
 xor rax, qword fs:[CONST]
 cjmp LABEL126
 add rsp, CONST
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 pop r15
 ret
LABEL94:
 mov edx, CONST
 lea rsi, [rip + CONST]
 xor edi, edi
 call CONST
 mov r12, rax
 call CONST
 mov rdx, r12
 mov edi, CONST
 mov esi, dword [rax]
 xor eax, eax
 call CONST
LABEL96:
 mov edx, CONST
 lea rsi, [rip + CONST]
 xor edi, edi
 call CONST
 xor esi, esi
 mov edi, CONST
 mov rdx, rax
 xor eax, eax
 call CONST
LABEL126:
 call CONST
