 .name fcn.00002620
 .offset 0000000000002620
 .file apt
 endbr64
 push r13
 lea rsi, [rip + CONST]
 push r12
 mov r12, rdi
 lea rdi, [rip + CONST]
 push rbp
 push rbx
 sub rsp, CONST
 mov rax, qword fs:[CONST]
 mov qword [rsp + CONST], rax
 xor eax, eax
 lea rax, [rip + CONST]
 mov qword [rsp], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], rax
 call CONST
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], rax
 call CONST
 mov rbp, qword [rip + CONST]
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov qword [rsp + CONST], rbp
 call CONST
 mov rbx, qword [rip + CONST]
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rbx
 mov qword [rsp + CONST], rax
 call CONST
 lea rsi, [rip + CONST]
 mov qword [rsp + CONST], rbx
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 call CONST
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rbx
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 call CONST
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rbx
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 call CONST
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rbx
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], rbx
 mov qword [rsp + CONST], rbx
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 call CONST
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], rax
 call CONST
 mov r13, qword [rip + CONST]
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov qword [rsp + CONST], r13
 call CONST
 lea rsi, [rip + CONST]
 lea rdi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], rax
 call CONST
 mov rbx, qword [rip + CONST]
 lea rdi, [rip + CONST]
 lea rsi, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov qword [rsp + CONST], rbx
 call CONST
 lea rdx, [rip + CONST]
 mov edi, CONST
 mov qword [rsp + CONST], r13
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [rsp + CONST], rbx
 mov qword [rsp + CONST], rax
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rdx
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [r12], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [r12 + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], rax
 mov rax, qword [rip + CONST]
 mov qword [r12 + CONST], CONST
 mov qword [rsp + CONST], rax
 lea rax, [rip + CONST]
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], rax
 mov qword [rsp + CONST], rbp
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 mov qword [rsp + CONST], CONST
 call CONST
 mov rcx, qword [rsp]
 mov qword [r12], rax
 lea rdi, [rax + CONST]
 mov rsi, rsp
 lea rdx, [rax + CONST]
 and rdi, CONST
 mov qword [r12 + CONST], rdx
 mov qword [rax], rcx
 mov rcx, qword [rsp + CONST]
 mov qword [rax + CONST], rcx
 sub rax, rdi
 sub rsi, rax
 add eax, CONST
 shr eax, CONST
 mov ecx, eax
 rep movsq qword [rdi], qword [rsi]
 mov qword [r12 + CONST], rdx
 mov rax, qword [rsp + CONST]
 xor rax, qword fs:[CONST]
 cjmp LABEL208
 add rsp, CONST
 mov rax, r12
 pop rbx
 pop rbp
 pop r12
 pop r13
 ret
LABEL208:
 call CONST
